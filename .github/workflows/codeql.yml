name: "CodeQL Advanced"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "28 21 * * 4"

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: c-cpp
            build-mode: manual

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - if: matrix.language == 'c-cpp'
        name: Manual Build for C and C++
        shell: bash
        run: |
          set -e  # Exit on first failure

          echo "Building C and C++ projects manually..."

          # Build C code if directory exists
          if [[ -d C ]]; then
            echo "Building C..."
            cd C
            if [[ -f Makefile ]]; then
              make
              ls -l  # Verify compiled binaries
            else
              echo "No Makefile found for C, skipping..."
            fi
            cd ..
          fi

          # Build C++ code if directory exists
          if [[ -d CPP ]]; then
            echo "Building C++..."
            cd CPP
            if [[ -f Makefile ]]; then
              make
              ls -l  # Verify compiled binaries
            else
              echo "No Makefile found for C++, skipping..."
            fi
            cd ..
          fi

          # Ensure CodeQL captures compilation info
          export CODEQL_EXTRACTOR_CXX_TRAP_DIR=$PWD

          # Generate compile_commands.json if missing
          if ! [[ -f C/compile_commands.json || -f CPP/compile_commands.json ]]; then
            echo "Generating compile_commands.json..."
            if command -v bear &> /dev/null; then
              bear -- make || echo "Failed to generate compile_commands.json"
            else
              echo "Bear not installed, skipping compile_commands.json generation."
            fi
          fi

          # Run clang-tidy for static analysis
          [[ -d C ]] && clang-tidy C/*.c -- -std=c11 || echo "Skipping clang-tidy for C"
          [[ -d CPP ]] && clang-tidy CPP/*.cpp -- -std=c++17 || echo "Skipping clang-tidy for C++"

          # Locate compiled binaries
          C_BINARY=$(find C -maxdepth 1 -type f -executable | head -n 1)
          CPP_BINARY=$(find CPP -maxdepth 1 -type f -executable | head -n 1)

          # Run Valgrind memory analysis
          [[ -n "$C_BINARY" ]] && valgrind "$C_BINARY" || echo "Skipping Valgrind for C (no binary found)"
          [[ -n "$CPP_BINARY" ]] && valgrind "$CPP_BINARY" || echo "Skipping Valgrind for C++ (no binary found)"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
